# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Download(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files_added': 'int',
        'bytes_added': 'int',
        'id': 'str',
        'total_files': 'int',
        'total_bytes': 'int',
        'status': 'str'
    }

    attribute_map = {
        'files_added': 'filesAdded',
        'bytes_added': 'bytesAdded',
        'id': 'id',
        'total_files': 'totalFiles',
        'total_bytes': 'totalBytes',
        'status': 'status'
    }

    def __init__(self, files_added=None, bytes_added=None, id=None, total_files=None, total_bytes=None, status='PENDING'):  # noqa: E501
        """Download - a model defined in Swagger"""  # noqa: E501
        self._files_added = None
        self._bytes_added = None
        self._id = None
        self._total_files = None
        self._total_bytes = None
        self._status = None
        self.discriminator = None
        if files_added is not None:
            self.files_added = files_added
        if bytes_added is not None:
            self.bytes_added = bytes_added
        if id is not None:
            self.id = id
        if total_files is not None:
            self.total_files = total_files
        if total_bytes is not None:
            self.total_bytes = total_bytes
        if status is not None:
            self.status = status

    @property
    def files_added(self):
        """Gets the files_added of this Download.  # noqa: E501

        number of files added so far in the zip  # noqa: E501

        :return: The files_added of this Download.  # noqa: E501
        :rtype: int
        """
        return self._files_added

    @files_added.setter
    def files_added(self, files_added):
        """Sets the files_added of this Download.

        number of files added so far in the zip  # noqa: E501

        :param files_added: The files_added of this Download.  # noqa: E501
        :type: int
        """

        self._files_added = files_added

    @property
    def bytes_added(self):
        """Gets the bytes_added of this Download.  # noqa: E501

        number of bytes added so far in the zip  # noqa: E501

        :return: The bytes_added of this Download.  # noqa: E501
        :rtype: int
        """
        return self._bytes_added

    @bytes_added.setter
    def bytes_added(self, bytes_added):
        """Sets the bytes_added of this Download.

        number of bytes added so far in the zip  # noqa: E501

        :param bytes_added: The bytes_added of this Download.  # noqa: E501
        :type: int
        """

        self._bytes_added = bytes_added

    @property
    def id(self):
        """Gets the id of this Download.  # noqa: E501

        the id of the download node  # noqa: E501

        :return: The id of this Download.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Download.

        the id of the download node  # noqa: E501

        :param id: The id of this Download.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def total_files(self):
        """Gets the total_files of this Download.  # noqa: E501

        the total number of files to be added in the zip  # noqa: E501

        :return: The total_files of this Download.  # noqa: E501
        :rtype: int
        """
        return self._total_files

    @total_files.setter
    def total_files(self, total_files):
        """Sets the total_files of this Download.

        the total number of files to be added in the zip  # noqa: E501

        :param total_files: The total_files of this Download.  # noqa: E501
        :type: int
        """

        self._total_files = total_files

    @property
    def total_bytes(self):
        """Gets the total_bytes of this Download.  # noqa: E501

        the total number of bytes to be added in the zip  # noqa: E501

        :return: The total_bytes of this Download.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this Download.

        the total number of bytes to be added in the zip  # noqa: E501

        :param total_bytes: The total_bytes of this Download.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    @property
    def status(self):
        """Gets the status of this Download.  # noqa: E501

        the current status of the download node creation  # noqa: E501

        :return: The status of this Download.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Download.

        the current status of the download node creation  # noqa: E501

        :param status: The status of this Download.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "CANCELLED", "IN_PROGRESS", "DONE", "MAX_CONTENT_SIZE_EXCEEDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Download, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Download):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
