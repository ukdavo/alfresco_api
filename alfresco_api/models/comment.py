# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'content': 'str',
        'created_by': 'Person',
        'created_at': 'datetime',
        'edited': 'bool',
        'modified_by': 'Person',
        'modified_at': 'datetime',
        'can_edit': 'bool',
        'can_delete': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'content': 'content',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'edited': 'edited',
        'modified_by': 'modifiedBy',
        'modified_at': 'modifiedAt',
        'can_edit': 'canEdit',
        'can_delete': 'canDelete'
    }

    def __init__(self, id=None, title=None, content=None, created_by=None, created_at=None, edited=None, modified_by=None, modified_at=None, can_edit=None, can_delete=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._content = None
        self._created_by = None
        self._created_at = None
        self._edited = None
        self._modified_by = None
        self._modified_at = None
        self._can_edit = None
        self._can_delete = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.content = content
        self.created_by = created_by
        self.created_at = created_at
        self.edited = edited
        self.modified_by = modified_by
        self.modified_at = modified_at
        self.can_edit = can_edit
        self.can_delete = can_delete

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Comment.  # noqa: E501


        :return: The title of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Comment.


        :param title: The title of this Comment.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Comment.  # noqa: E501


        :return: The content of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.


        :param content: The content of this Comment.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def created_by(self):
        """Gets the created_by of this Comment.  # noqa: E501


        :return: The created_by of this Comment.  # noqa: E501
        :rtype: Person
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Comment.


        :param created_by: The created_by of this Comment.  # noqa: E501
        :type: Person
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Comment.  # noqa: E501


        :return: The created_at of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def edited(self):
        """Gets the edited of this Comment.  # noqa: E501


        :return: The edited of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._edited

    @edited.setter
    def edited(self, edited):
        """Sets the edited of this Comment.


        :param edited: The edited of this Comment.  # noqa: E501
        :type: bool
        """
        if edited is None:
            raise ValueError("Invalid value for `edited`, must not be `None`")  # noqa: E501

        self._edited = edited

    @property
    def modified_by(self):
        """Gets the modified_by of this Comment.  # noqa: E501


        :return: The modified_by of this Comment.  # noqa: E501
        :rtype: Person
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Comment.


        :param modified_by: The modified_by of this Comment.  # noqa: E501
        :type: Person
        """
        if modified_by is None:
            raise ValueError("Invalid value for `modified_by`, must not be `None`")  # noqa: E501

        self._modified_by = modified_by

    @property
    def modified_at(self):
        """Gets the modified_at of this Comment.  # noqa: E501


        :return: The modified_at of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Comment.


        :param modified_at: The modified_at of this Comment.  # noqa: E501
        :type: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def can_edit(self):
        """Gets the can_edit of this Comment.  # noqa: E501


        :return: The can_edit of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Comment.


        :param can_edit: The can_edit of this Comment.  # noqa: E501
        :type: bool
        """
        if can_edit is None:
            raise ValueError("Invalid value for `can_edit`, must not be `None`")  # noqa: E501

        self._can_edit = can_edit

    @property
    def can_delete(self):
        """Gets the can_delete of this Comment.  # noqa: E501


        :return: The can_delete of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this Comment.


        :param can_delete: The can_delete of this Comment.  # noqa: E501
        :type: bool
        """
        if can_delete is None:
            raise ValueError("Invalid value for `can_delete`, must not be `None`")  # noqa: E501

        self._can_delete = can_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
