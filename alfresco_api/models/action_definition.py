# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'applicable_types': 'list[str]',
        'track_status': 'bool',
        'parameter_definitions': 'list[ActionParameterDefinition]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'applicable_types': 'applicableTypes',
        'track_status': 'trackStatus',
        'parameter_definitions': 'parameterDefinitions'
    }

    def __init__(self, id=None, name=None, title=None, description=None, applicable_types=None, track_status=None, parameter_definitions=None):  # noqa: E501
        """ActionDefinition - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._title = None
        self._description = None
        self._applicable_types = None
        self._track_status = None
        self._parameter_definitions = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.applicable_types = applicable_types
        self.track_status = track_status
        if parameter_definitions is not None:
            self.parameter_definitions = parameter_definitions

    @property
    def id(self):
        """Gets the id of this ActionDefinition.  # noqa: E501

        Identifier of the action definition — used for example when executing an action  # noqa: E501

        :return: The id of this ActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionDefinition.

        Identifier of the action definition — used for example when executing an action  # noqa: E501

        :param id: The id of this ActionDefinition.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ActionDefinition.  # noqa: E501

        name of the action definition, e.g. \"move\"  # noqa: E501

        :return: The name of this ActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionDefinition.

        name of the action definition, e.g. \"move\"  # noqa: E501

        :param name: The name of this ActionDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this ActionDefinition.  # noqa: E501

        title of the action definition, e.g. \"Move\"  # noqa: E501

        :return: The title of this ActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActionDefinition.

        title of the action definition, e.g. \"Move\"  # noqa: E501

        :param title: The title of this ActionDefinition.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ActionDefinition.  # noqa: E501

        describes the action definition, e.g. \"This will move the matched item to another space.\"  # noqa: E501

        :return: The description of this ActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionDefinition.

        describes the action definition, e.g. \"This will move the matched item to another space.\"  # noqa: E501

        :param description: The description of this ActionDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def applicable_types(self):
        """Gets the applicable_types of this ActionDefinition.  # noqa: E501

        QNames of the types this action applies to  # noqa: E501

        :return: The applicable_types of this ActionDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._applicable_types

    @applicable_types.setter
    def applicable_types(self, applicable_types):
        """Sets the applicable_types of this ActionDefinition.

        QNames of the types this action applies to  # noqa: E501

        :param applicable_types: The applicable_types of this ActionDefinition.  # noqa: E501
        :type: list[str]
        """
        if applicable_types is None:
            raise ValueError("Invalid value for `applicable_types`, must not be `None`")  # noqa: E501

        self._applicable_types = applicable_types

    @property
    def track_status(self):
        """Gets the track_status of this ActionDefinition.  # noqa: E501

        whether the basic action definition supports action tracking or not  # noqa: E501

        :return: The track_status of this ActionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._track_status

    @track_status.setter
    def track_status(self, track_status):
        """Sets the track_status of this ActionDefinition.

        whether the basic action definition supports action tracking or not  # noqa: E501

        :param track_status: The track_status of this ActionDefinition.  # noqa: E501
        :type: bool
        """
        if track_status is None:
            raise ValueError("Invalid value for `track_status`, must not be `None`")  # noqa: E501

        self._track_status = track_status

    @property
    def parameter_definitions(self):
        """Gets the parameter_definitions of this ActionDefinition.  # noqa: E501


        :return: The parameter_definitions of this ActionDefinition.  # noqa: E501
        :rtype: list[ActionParameterDefinition]
        """
        return self._parameter_definitions

    @parameter_definitions.setter
    def parameter_definitions(self, parameter_definitions):
        """Sets the parameter_definitions of this ActionDefinition.


        :param parameter_definitions: The parameter_definitions of this ActionDefinition.  # noqa: E501
        :type: list[ActionParameterDefinition]
        """

        self._parameter_definitions = parameter_definitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
