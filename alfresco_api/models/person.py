# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Person(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'display_name': 'str',
        'description': 'str',
        'avatar_id': 'str',
        'email': 'str',
        'skype_id': 'str',
        'google_id': 'str',
        'instant_message_id': 'str',
        'job_title': 'str',
        'location': 'str',
        'company': 'Company',
        'mobile': 'str',
        'telephone': 'str',
        'status_updated_at': 'datetime',
        'user_status': 'str',
        'enabled': 'bool',
        'email_notifications_enabled': 'bool',
        'aspect_names': 'list[str]',
        'properties': 'object',
        'capabilities': 'Capabilities'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'display_name': 'displayName',
        'description': 'description',
        'avatar_id': 'avatarId',
        'email': 'email',
        'skype_id': 'skypeId',
        'google_id': 'googleId',
        'instant_message_id': 'instantMessageId',
        'job_title': 'jobTitle',
        'location': 'location',
        'company': 'company',
        'mobile': 'mobile',
        'telephone': 'telephone',
        'status_updated_at': 'statusUpdatedAt',
        'user_status': 'userStatus',
        'enabled': 'enabled',
        'email_notifications_enabled': 'emailNotificationsEnabled',
        'aspect_names': 'aspectNames',
        'properties': 'properties',
        'capabilities': 'capabilities'
    }

    def __init__(self, id=None, first_name=None, last_name=None, display_name=None, description=None, avatar_id=None, email=None, skype_id=None, google_id=None, instant_message_id=None, job_title=None, location=None, company=None, mobile=None, telephone=None, status_updated_at=None, user_status=None, enabled=True, email_notifications_enabled=True, aspect_names=None, properties=None, capabilities=None):  # noqa: E501
        """Person - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._description = None
        self._avatar_id = None
        self._email = None
        self._skype_id = None
        self._google_id = None
        self._instant_message_id = None
        self._job_title = None
        self._location = None
        self._company = None
        self._mobile = None
        self._telephone = None
        self._status_updated_at = None
        self._user_status = None
        self._enabled = None
        self._email_notifications_enabled = None
        self._aspect_names = None
        self._properties = None
        self._capabilities = None
        self.discriminator = None
        self.id = id
        self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if avatar_id is not None:
            self.avatar_id = avatar_id
        self.email = email
        if skype_id is not None:
            self.skype_id = skype_id
        if google_id is not None:
            self.google_id = google_id
        if instant_message_id is not None:
            self.instant_message_id = instant_message_id
        if job_title is not None:
            self.job_title = job_title
        if location is not None:
            self.location = location
        if company is not None:
            self.company = company
        if mobile is not None:
            self.mobile = mobile
        if telephone is not None:
            self.telephone = telephone
        if status_updated_at is not None:
            self.status_updated_at = status_updated_at
        if user_status is not None:
            self.user_status = user_status
        self.enabled = enabled
        if email_notifications_enabled is not None:
            self.email_notifications_enabled = email_notifications_enabled
        if aspect_names is not None:
            self.aspect_names = aspect_names
        if properties is not None:
            self.properties = properties
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def id(self):
        """Gets the id of this Person.  # noqa: E501


        :return: The id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.


        :param id: The id of this Person.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Person.  # noqa: E501


        :return: The first_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.


        :param first_name: The first_name of this Person.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Person.  # noqa: E501


        :return: The last_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.


        :param last_name: The last_name of this Person.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this Person.  # noqa: E501


        :return: The display_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Person.


        :param display_name: The display_name of this Person.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this Person.  # noqa: E501


        :return: The description of this Person.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Person.


        :param description: The description of this Person.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def avatar_id(self):
        """Gets the avatar_id of this Person.  # noqa: E501


        :return: The avatar_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this Person.


        :param avatar_id: The avatar_id of this Person.  # noqa: E501
        :type: str
        """

        self._avatar_id = avatar_id

    @property
    def email(self):
        """Gets the email of this Person.  # noqa: E501


        :return: The email of this Person.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def skype_id(self):
        """Gets the skype_id of this Person.  # noqa: E501


        :return: The skype_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._skype_id

    @skype_id.setter
    def skype_id(self, skype_id):
        """Sets the skype_id of this Person.


        :param skype_id: The skype_id of this Person.  # noqa: E501
        :type: str
        """

        self._skype_id = skype_id

    @property
    def google_id(self):
        """Gets the google_id of this Person.  # noqa: E501


        :return: The google_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._google_id

    @google_id.setter
    def google_id(self, google_id):
        """Sets the google_id of this Person.


        :param google_id: The google_id of this Person.  # noqa: E501
        :type: str
        """

        self._google_id = google_id

    @property
    def instant_message_id(self):
        """Gets the instant_message_id of this Person.  # noqa: E501


        :return: The instant_message_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._instant_message_id

    @instant_message_id.setter
    def instant_message_id(self, instant_message_id):
        """Sets the instant_message_id of this Person.


        :param instant_message_id: The instant_message_id of this Person.  # noqa: E501
        :type: str
        """

        self._instant_message_id = instant_message_id

    @property
    def job_title(self):
        """Gets the job_title of this Person.  # noqa: E501


        :return: The job_title of this Person.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Person.


        :param job_title: The job_title of this Person.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def location(self):
        """Gets the location of this Person.  # noqa: E501


        :return: The location of this Person.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Person.


        :param location: The location of this Person.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def company(self):
        """Gets the company of this Person.  # noqa: E501


        :return: The company of this Person.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Person.


        :param company: The company of this Person.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def mobile(self):
        """Gets the mobile of this Person.  # noqa: E501


        :return: The mobile of this Person.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Person.


        :param mobile: The mobile of this Person.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def telephone(self):
        """Gets the telephone of this Person.  # noqa: E501


        :return: The telephone of this Person.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Person.


        :param telephone: The telephone of this Person.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def status_updated_at(self):
        """Gets the status_updated_at of this Person.  # noqa: E501


        :return: The status_updated_at of this Person.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """Sets the status_updated_at of this Person.


        :param status_updated_at: The status_updated_at of this Person.  # noqa: E501
        :type: datetime
        """

        self._status_updated_at = status_updated_at

    @property
    def user_status(self):
        """Gets the user_status of this Person.  # noqa: E501


        :return: The user_status of this Person.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this Person.


        :param user_status: The user_status of this Person.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def enabled(self):
        """Gets the enabled of this Person.  # noqa: E501


        :return: The enabled of this Person.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Person.


        :param enabled: The enabled of this Person.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def email_notifications_enabled(self):
        """Gets the email_notifications_enabled of this Person.  # noqa: E501


        :return: The email_notifications_enabled of this Person.  # noqa: E501
        :rtype: bool
        """
        return self._email_notifications_enabled

    @email_notifications_enabled.setter
    def email_notifications_enabled(self, email_notifications_enabled):
        """Sets the email_notifications_enabled of this Person.


        :param email_notifications_enabled: The email_notifications_enabled of this Person.  # noqa: E501
        :type: bool
        """

        self._email_notifications_enabled = email_notifications_enabled

    @property
    def aspect_names(self):
        """Gets the aspect_names of this Person.  # noqa: E501


        :return: The aspect_names of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._aspect_names

    @aspect_names.setter
    def aspect_names(self, aspect_names):
        """Sets the aspect_names of this Person.


        :param aspect_names: The aspect_names of this Person.  # noqa: E501
        :type: list[str]
        """

        self._aspect_names = aspect_names

    @property
    def properties(self):
        """Gets the properties of this Person.  # noqa: E501


        :return: The properties of this Person.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Person.


        :param properties: The properties of this Person.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def capabilities(self):
        """Gets the capabilities of this Person.  # noqa: E501


        :return: The capabilities of this Person.  # noqa: E501
        :rtype: Capabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Person.


        :param capabilities: The capabilities of this Person.  # noqa: E501
        :type: Capabilities
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Person, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
