# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'default_value': 'str',
        'data_type': 'str',
        'is_multi_valued': 'bool',
        'is_mandatory': 'bool',
        'is_mandatory_enforced': 'bool',
        'is_protected': 'bool',
        'constraints': 'list[Constraint]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'default_value': 'defaultValue',
        'data_type': 'dataType',
        'is_multi_valued': 'isMultiValued',
        'is_mandatory': 'isMandatory',
        'is_mandatory_enforced': 'isMandatoryEnforced',
        'is_protected': 'isProtected',
        'constraints': 'constraints'
    }

    def __init__(self, id=None, title=None, description=None, default_value=None, data_type=None, is_multi_valued=None, is_mandatory=None, is_mandatory_enforced=None, is_protected=None, constraints=None):  # noqa: E501
        """ModelProperty - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._default_value = None
        self._data_type = None
        self._is_multi_valued = None
        self._is_mandatory = None
        self._is_mandatory_enforced = None
        self._is_protected = None
        self._constraints = None
        self.discriminator = None
        self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value
        if data_type is not None:
            self.data_type = data_type
        if is_multi_valued is not None:
            self.is_multi_valued = is_multi_valued
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if is_mandatory_enforced is not None:
            self.is_mandatory_enforced = is_mandatory_enforced
        if is_protected is not None:
            self.is_protected = is_protected
        if constraints is not None:
            self.constraints = constraints

    @property
    def id(self):
        """Gets the id of this ModelProperty.  # noqa: E501


        :return: The id of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelProperty.


        :param id: The id of this ModelProperty.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this ModelProperty.  # noqa: E501

        the human-readable title  # noqa: E501

        :return: The title of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModelProperty.

        the human-readable title  # noqa: E501

        :param title: The title of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ModelProperty.  # noqa: E501

        the human-readable description  # noqa: E501

        :return: The description of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelProperty.

        the human-readable description  # noqa: E501

        :param description: The description of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this ModelProperty.  # noqa: E501

        the default value  # noqa: E501

        :return: The default_value of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ModelProperty.

        the default value  # noqa: E501

        :param default_value: The default_value of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def data_type(self):
        """Gets the data_type of this ModelProperty.  # noqa: E501

        the name of the property type (e.g. d:text)  # noqa: E501

        :return: The data_type of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ModelProperty.

        the name of the property type (e.g. d:text)  # noqa: E501

        :param data_type: The data_type of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def is_multi_valued(self):
        """Gets the is_multi_valued of this ModelProperty.  # noqa: E501

        define if the property is multi-valued  # noqa: E501

        :return: The is_multi_valued of this ModelProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_valued

    @is_multi_valued.setter
    def is_multi_valued(self, is_multi_valued):
        """Sets the is_multi_valued of this ModelProperty.

        define if the property is multi-valued  # noqa: E501

        :param is_multi_valued: The is_multi_valued of this ModelProperty.  # noqa: E501
        :type: bool
        """

        self._is_multi_valued = is_multi_valued

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this ModelProperty.  # noqa: E501

        define if the property is mandatory  # noqa: E501

        :return: The is_mandatory of this ModelProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this ModelProperty.

        define if the property is mandatory  # noqa: E501

        :param is_mandatory: The is_mandatory of this ModelProperty.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def is_mandatory_enforced(self):
        """Gets the is_mandatory_enforced of this ModelProperty.  # noqa: E501

        define if the presence of mandatory properties is enforced  # noqa: E501

        :return: The is_mandatory_enforced of this ModelProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory_enforced

    @is_mandatory_enforced.setter
    def is_mandatory_enforced(self, is_mandatory_enforced):
        """Sets the is_mandatory_enforced of this ModelProperty.

        define if the presence of mandatory properties is enforced  # noqa: E501

        :param is_mandatory_enforced: The is_mandatory_enforced of this ModelProperty.  # noqa: E501
        :type: bool
        """

        self._is_mandatory_enforced = is_mandatory_enforced

    @property
    def is_protected(self):
        """Gets the is_protected of this ModelProperty.  # noqa: E501

        define if the property is system maintained  # noqa: E501

        :return: The is_protected of this ModelProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this ModelProperty.

        define if the property is system maintained  # noqa: E501

        :param is_protected: The is_protected of this ModelProperty.  # noqa: E501
        :type: bool
        """

        self._is_protected = is_protected

    @property
    def constraints(self):
        """Gets the constraints of this ModelProperty.  # noqa: E501

        list of constraints defined for the property  # noqa: E501

        :return: The constraints of this ModelProperty.  # noqa: E501
        :rtype: list[Constraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ModelProperty.

        list of constraints defined for the property  # noqa: E501

        :param constraints: The constraints of this ModelProperty.  # noqa: E501
        :type: list[Constraint]
        """

        self._constraints = constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
