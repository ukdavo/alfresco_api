# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharedLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'expires_at': 'datetime',
        'node_id': 'str',
        'name': 'str',
        'title': 'str',
        'description': 'str',
        'modified_at': 'datetime',
        'modified_by_user': 'UserInfo',
        'shared_by_user': 'UserInfo',
        'content': 'ContentInfo',
        'allowable_operations': 'list[str]',
        'allowable_operations_on_target': 'list[str]',
        'is_favorite': 'bool',
        'properties': 'object',
        'aspect_names': 'list[str]',
        'path': 'PathInfo'
    }

    attribute_map = {
        'id': 'id',
        'expires_at': 'expiresAt',
        'node_id': 'nodeId',
        'name': 'name',
        'title': 'title',
        'description': 'description',
        'modified_at': 'modifiedAt',
        'modified_by_user': 'modifiedByUser',
        'shared_by_user': 'sharedByUser',
        'content': 'content',
        'allowable_operations': 'allowableOperations',
        'allowable_operations_on_target': 'allowableOperationsOnTarget',
        'is_favorite': 'isFavorite',
        'properties': 'properties',
        'aspect_names': 'aspectNames',
        'path': 'path'
    }

    def __init__(self, id=None, expires_at=None, node_id=None, name=None, title=None, description=None, modified_at=None, modified_by_user=None, shared_by_user=None, content=None, allowable_operations=None, allowable_operations_on_target=None, is_favorite=None, properties=None, aspect_names=None, path=None):  # noqa: E501
        """SharedLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._expires_at = None
        self._node_id = None
        self._name = None
        self._title = None
        self._description = None
        self._modified_at = None
        self._modified_by_user = None
        self._shared_by_user = None
        self._content = None
        self._allowable_operations = None
        self._allowable_operations_on_target = None
        self._is_favorite = None
        self._properties = None
        self._aspect_names = None
        self._path = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if expires_at is not None:
            self.expires_at = expires_at
        if node_id is not None:
            self.node_id = node_id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by_user is not None:
            self.modified_by_user = modified_by_user
        if shared_by_user is not None:
            self.shared_by_user = shared_by_user
        if content is not None:
            self.content = content
        if allowable_operations is not None:
            self.allowable_operations = allowable_operations
        if allowable_operations_on_target is not None:
            self.allowable_operations_on_target = allowable_operations_on_target
        if is_favorite is not None:
            self.is_favorite = is_favorite
        if properties is not None:
            self.properties = properties
        if aspect_names is not None:
            self.aspect_names = aspect_names
        if path is not None:
            self.path = path

    @property
    def id(self):
        """Gets the id of this SharedLink.  # noqa: E501


        :return: The id of this SharedLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedLink.


        :param id: The id of this SharedLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def expires_at(self):
        """Gets the expires_at of this SharedLink.  # noqa: E501


        :return: The expires_at of this SharedLink.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this SharedLink.


        :param expires_at: The expires_at of this SharedLink.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def node_id(self):
        """Gets the node_id of this SharedLink.  # noqa: E501


        :return: The node_id of this SharedLink.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this SharedLink.


        :param node_id: The node_id of this SharedLink.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def name(self):
        """Gets the name of this SharedLink.  # noqa: E501

        The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.   # noqa: E501

        :return: The name of this SharedLink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedLink.

        The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.   # noqa: E501

        :param name: The name of this SharedLink.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this SharedLink.  # noqa: E501


        :return: The title of this SharedLink.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SharedLink.


        :param title: The title of this SharedLink.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this SharedLink.  # noqa: E501


        :return: The description of this SharedLink.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SharedLink.


        :param description: The description of this SharedLink.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def modified_at(self):
        """Gets the modified_at of this SharedLink.  # noqa: E501


        :return: The modified_at of this SharedLink.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this SharedLink.


        :param modified_at: The modified_at of this SharedLink.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by_user(self):
        """Gets the modified_by_user of this SharedLink.  # noqa: E501


        :return: The modified_by_user of this SharedLink.  # noqa: E501
        :rtype: UserInfo
        """
        return self._modified_by_user

    @modified_by_user.setter
    def modified_by_user(self, modified_by_user):
        """Sets the modified_by_user of this SharedLink.


        :param modified_by_user: The modified_by_user of this SharedLink.  # noqa: E501
        :type: UserInfo
        """

        self._modified_by_user = modified_by_user

    @property
    def shared_by_user(self):
        """Gets the shared_by_user of this SharedLink.  # noqa: E501


        :return: The shared_by_user of this SharedLink.  # noqa: E501
        :rtype: UserInfo
        """
        return self._shared_by_user

    @shared_by_user.setter
    def shared_by_user(self, shared_by_user):
        """Sets the shared_by_user of this SharedLink.


        :param shared_by_user: The shared_by_user of this SharedLink.  # noqa: E501
        :type: UserInfo
        """

        self._shared_by_user = shared_by_user

    @property
    def content(self):
        """Gets the content of this SharedLink.  # noqa: E501


        :return: The content of this SharedLink.  # noqa: E501
        :rtype: ContentInfo
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SharedLink.


        :param content: The content of this SharedLink.  # noqa: E501
        :type: ContentInfo
        """

        self._content = content

    @property
    def allowable_operations(self):
        """Gets the allowable_operations of this SharedLink.  # noqa: E501

        The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the allowable operations pertaining to the linked content node.   # noqa: E501

        :return: The allowable_operations of this SharedLink.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowable_operations

    @allowable_operations.setter
    def allowable_operations(self, allowable_operations):
        """Sets the allowable_operations of this SharedLink.

        The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the allowable operations pertaining to the linked content node.   # noqa: E501

        :param allowable_operations: The allowable_operations of this SharedLink.  # noqa: E501
        :type: list[str]
        """

        self._allowable_operations = allowable_operations

    @property
    def allowable_operations_on_target(self):
        """Gets the allowable_operations_on_target of this SharedLink.  # noqa: E501

        The allowable operations for the content node being shared.   # noqa: E501

        :return: The allowable_operations_on_target of this SharedLink.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowable_operations_on_target

    @allowable_operations_on_target.setter
    def allowable_operations_on_target(self, allowable_operations_on_target):
        """Sets the allowable_operations_on_target of this SharedLink.

        The allowable operations for the content node being shared.   # noqa: E501

        :param allowable_operations_on_target: The allowable_operations_on_target of this SharedLink.  # noqa: E501
        :type: list[str]
        """

        self._allowable_operations_on_target = allowable_operations_on_target

    @property
    def is_favorite(self):
        """Gets the is_favorite of this SharedLink.  # noqa: E501


        :return: The is_favorite of this SharedLink.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this SharedLink.


        :param is_favorite: The is_favorite of this SharedLink.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    @property
    def properties(self):
        """Gets the properties of this SharedLink.  # noqa: E501

        A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded.   # noqa: E501

        :return: The properties of this SharedLink.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SharedLink.

        A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded.   # noqa: E501

        :param properties: The properties of this SharedLink.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def aspect_names(self):
        """Gets the aspect_names of this SharedLink.  # noqa: E501


        :return: The aspect_names of this SharedLink.  # noqa: E501
        :rtype: list[str]
        """
        return self._aspect_names

    @aspect_names.setter
    def aspect_names(self, aspect_names):
        """Sets the aspect_names of this SharedLink.


        :param aspect_names: The aspect_names of this SharedLink.  # noqa: E501
        :type: list[str]
        """

        self._aspect_names = aspect_names

    @property
    def path(self):
        """Gets the path of this SharedLink.  # noqa: E501


        :return: The path of this SharedLink.  # noqa: E501
        :rtype: PathInfo
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SharedLink.


        :param path: The path of this SharedLink.  # noqa: E501
        :type: PathInfo
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
