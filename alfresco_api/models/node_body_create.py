# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeBodyCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'node_type': 'str',
        'aspect_names': 'list[str]',
        'properties': 'object',
        'permissions': 'PermissionsBody',
        'definition': 'Definition',
        'relative_path': 'str',
        'association': 'NodeBodyCreateAssociation',
        'secondary_children': 'list[ChildAssociationBody]',
        'targets': 'list[AssociationBody]'
    }

    attribute_map = {
        'name': 'name',
        'node_type': 'nodeType',
        'aspect_names': 'aspectNames',
        'properties': 'properties',
        'permissions': 'permissions',
        'definition': 'definition',
        'relative_path': 'relativePath',
        'association': 'association',
        'secondary_children': 'secondaryChildren',
        'targets': 'targets'
    }

    def __init__(self, name=None, node_type=None, aspect_names=None, properties=None, permissions=None, definition=None, relative_path=None, association=None, secondary_children=None, targets=None):  # noqa: E501
        """NodeBodyCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._node_type = None
        self._aspect_names = None
        self._properties = None
        self._permissions = None
        self._definition = None
        self._relative_path = None
        self._association = None
        self._secondary_children = None
        self._targets = None
        self.discriminator = None
        self.name = name
        self.node_type = node_type
        if aspect_names is not None:
            self.aspect_names = aspect_names
        if properties is not None:
            self.properties = properties
        if permissions is not None:
            self.permissions = permissions
        if definition is not None:
            self.definition = definition
        if relative_path is not None:
            self.relative_path = relative_path
        if association is not None:
            self.association = association
        if secondary_children is not None:
            self.secondary_children = secondary_children
        if targets is not None:
            self.targets = targets

    @property
    def name(self):
        """Gets the name of this NodeBodyCreate.  # noqa: E501

        The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.   # noqa: E501

        :return: The name of this NodeBodyCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeBodyCreate.

        The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name.   # noqa: E501

        :param name: The name of this NodeBodyCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def node_type(self):
        """Gets the node_type of this NodeBodyCreate.  # noqa: E501


        :return: The node_type of this NodeBodyCreate.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this NodeBodyCreate.


        :param node_type: The node_type of this NodeBodyCreate.  # noqa: E501
        :type: str
        """
        if node_type is None:
            raise ValueError("Invalid value for `node_type`, must not be `None`")  # noqa: E501

        self._node_type = node_type

    @property
    def aspect_names(self):
        """Gets the aspect_names of this NodeBodyCreate.  # noqa: E501


        :return: The aspect_names of this NodeBodyCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._aspect_names

    @aspect_names.setter
    def aspect_names(self, aspect_names):
        """Sets the aspect_names of this NodeBodyCreate.


        :param aspect_names: The aspect_names of this NodeBodyCreate.  # noqa: E501
        :type: list[str]
        """

        self._aspect_names = aspect_names

    @property
    def properties(self):
        """Gets the properties of this NodeBodyCreate.  # noqa: E501


        :return: The properties of this NodeBodyCreate.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeBodyCreate.


        :param properties: The properties of this NodeBodyCreate.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def permissions(self):
        """Gets the permissions of this NodeBodyCreate.  # noqa: E501


        :return: The permissions of this NodeBodyCreate.  # noqa: E501
        :rtype: PermissionsBody
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this NodeBodyCreate.


        :param permissions: The permissions of this NodeBodyCreate.  # noqa: E501
        :type: PermissionsBody
        """

        self._permissions = permissions

    @property
    def definition(self):
        """Gets the definition of this NodeBodyCreate.  # noqa: E501


        :return: The definition of this NodeBodyCreate.  # noqa: E501
        :rtype: Definition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this NodeBodyCreate.


        :param definition: The definition of this NodeBodyCreate.  # noqa: E501
        :type: Definition
        """

        self._definition = definition

    @property
    def relative_path(self):
        """Gets the relative_path of this NodeBodyCreate.  # noqa: E501


        :return: The relative_path of this NodeBodyCreate.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this NodeBodyCreate.


        :param relative_path: The relative_path of this NodeBodyCreate.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def association(self):
        """Gets the association of this NodeBodyCreate.  # noqa: E501


        :return: The association of this NodeBodyCreate.  # noqa: E501
        :rtype: NodeBodyCreateAssociation
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this NodeBodyCreate.


        :param association: The association of this NodeBodyCreate.  # noqa: E501
        :type: NodeBodyCreateAssociation
        """

        self._association = association

    @property
    def secondary_children(self):
        """Gets the secondary_children of this NodeBodyCreate.  # noqa: E501


        :return: The secondary_children of this NodeBodyCreate.  # noqa: E501
        :rtype: list[ChildAssociationBody]
        """
        return self._secondary_children

    @secondary_children.setter
    def secondary_children(self, secondary_children):
        """Sets the secondary_children of this NodeBodyCreate.


        :param secondary_children: The secondary_children of this NodeBodyCreate.  # noqa: E501
        :type: list[ChildAssociationBody]
        """

        self._secondary_children = secondary_children

    @property
    def targets(self):
        """Gets the targets of this NodeBodyCreate.  # noqa: E501


        :return: The targets of this NodeBodyCreate.  # noqa: E501
        :rtype: list[AssociationBody]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this NodeBodyCreate.


        :param targets: The targets of this NodeBodyCreate.  # noqa: E501
        :type: list[AssociationBody]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeBodyCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeBodyCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
