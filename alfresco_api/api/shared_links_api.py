# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alfresco_api.api_client import ApiClient


class SharedLinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_shared_link(self, body, **kwargs):  # noqa: E501
        """Create a shared link to a file  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  ```JSON   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-3333333333\",     \"expiresAt\": \"2017-03-23T23:00:00.000+0000\"   } ```  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  ```JSON [   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-4444444444\"   },   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-5555555555\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shared_link(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedLinkBodyCreate body: The nodeId to create a shared link for. (required)
        :param list[str] include: Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_shared_link_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_shared_link_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_shared_link_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a shared link to a file  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  ```JSON   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-3333333333\",     \"expiresAt\": \"2017-03-23T23:00:00.000+0000\"   } ```  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  ```JSON [   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-4444444444\"   },   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-5555555555\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shared_link_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedLinkBodyCreate body: The nodeId to create a shared link for. (required)
        :param list[str] include: Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'include', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shared_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_shared_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharedLinkEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_shared_link(self, shared_id, **kwargs):  # noqa: E501
        """Deletes a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_shared_link(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_shared_link_with_http_info(shared_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_shared_link_with_http_info(shared_id, **kwargs)  # noqa: E501
            return data

    def delete_shared_link_with_http_info(self, shared_id, **kwargs):  # noqa: E501
        """Deletes a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_shared_link_with_http_info(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_shared_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `delete_shared_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_shared_link(self, body, shared_id, **kwargs):  # noqa: E501
        """Email shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"] } ``` A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"],     \"message\": \"myMessage\",     \"locale\":\"en-GB\" } ``` **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: ```JSON {     \"client\": \"share\",     \"recipientEmails\": [\"john.doe@acme.com\"] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_shared_link(body, shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedLinkBodyEmail body: The shared link email to send. (required)
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.email_shared_link_with_http_info(body, shared_id, **kwargs)  # noqa: E501
        else:
            (data) = self.email_shared_link_with_http_info(body, shared_id, **kwargs)  # noqa: E501
            return data

    def email_shared_link_with_http_info(self, body, shared_id, **kwargs):  # noqa: E501
        """Email shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"] } ``` A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"],     \"message\": \"myMessage\",     \"locale\":\"en-GB\" } ``` **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: ```JSON {     \"client\": \"share\",     \"recipientEmails\": [\"john.doe@acme.com\"] } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_shared_link_with_http_info(body, shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SharedLinkBodyEmail body: The shared link email to send. (required)
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'shared_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_shared_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `email_shared_link`")  # noqa: E501
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `email_shared_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}/email', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shared_link(self, shared_id, **kwargs):  # noqa: E501
        """Get a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shared_link_with_http_info(shared_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_link_with_http_info(shared_id, **kwargs)  # noqa: E501
            return data

    def get_shared_link_with_http_info(self, shared_id, **kwargs):  # noqa: E501
        """Get a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_with_http_info(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `get_shared_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharedLinkEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shared_link_content(self, shared_id, **kwargs):  # noqa: E501
        """Get shared link content  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_content(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param bool attachment: **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. 
        :param datetime if_modified_since: Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`. 
        :param str range: The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes=1-10. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shared_link_content_with_http_info(shared_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_link_content_with_http_info(shared_id, **kwargs)  # noqa: E501
            return data

    def get_shared_link_content_with_http_info(self, shared_id, **kwargs):  # noqa: E501
        """Get shared link content  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_content_with_http_info(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param bool attachment: **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. 
        :param datetime if_modified_since: Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`. 
        :param str range: The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes=1-10. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id', 'attachment', 'if_modified_since', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_link_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `get_shared_link_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501

        query_params = []
        if 'attachment' in params:
            query_params.append(('attachment', params['attachment']))  # noqa: E501

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501
        if 'range' in params:
            header_params['Range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shared_link_rendition(self, shared_id, rendition_id, **kwargs):  # noqa: E501
        """Get shared link rendition information  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_rendition(shared_id, rendition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param str rendition_id: The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
        :return: RenditionEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shared_link_rendition_with_http_info(shared_id, rendition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_link_rendition_with_http_info(shared_id, rendition_id, **kwargs)  # noqa: E501
            return data

    def get_shared_link_rendition_with_http_info(self, shared_id, rendition_id, **kwargs):  # noqa: E501
        """Get shared link rendition information  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_rendition_with_http_info(shared_id, rendition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param str rendition_id: The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
        :return: RenditionEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id', 'rendition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_link_rendition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `get_shared_link_rendition`")  # noqa: E501
        # verify the required parameter 'rendition_id' is set
        if ('rendition_id' not in params or
                params['rendition_id'] is None):
            raise ValueError("Missing the required parameter `rendition_id` when calling `get_shared_link_rendition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501
        if 'rendition_id' in params:
            path_params['renditionId'] = params['rendition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}/renditions/{renditionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RenditionEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shared_link_rendition_content(self, shared_id, rendition_id, **kwargs):  # noqa: E501
        """Get shared link rendition content  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_rendition_content(shared_id, rendition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param str rendition_id: The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
        :param bool attachment: **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. 
        :param datetime if_modified_since: Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`. 
        :param str range: The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes=1-10. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shared_link_rendition_content_with_http_info(shared_id, rendition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_link_rendition_content_with_http_info(shared_id, rendition_id, **kwargs)  # noqa: E501
            return data

    def get_shared_link_rendition_content_with_http_info(self, shared_id, rendition_id, **kwargs):  # noqa: E501
        """Get shared link rendition content  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_link_rendition_content_with_http_info(shared_id, rendition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :param str rendition_id: The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
        :param bool attachment: **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. 
        :param datetime if_modified_since: Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`. 
        :param str range: The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes=1-10. 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id', 'rendition_id', 'attachment', 'if_modified_since', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_link_rendition_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `get_shared_link_rendition_content`")  # noqa: E501
        # verify the required parameter 'rendition_id' is set
        if ('rendition_id' not in params or
                params['rendition_id'] is None):
            raise ValueError("Missing the required parameter `rendition_id` when calling `get_shared_link_rendition_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501
        if 'rendition_id' in params:
            path_params['renditionId'] = params['rendition_id']  # noqa: E501

        query_params = []
        if 'attachment' in params:
            query_params.append(('attachment', params['attachment']))  # noqa: E501

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501
        if 'range' in params:
            header_params['Range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_shared_link_renditions(self, shared_id, **kwargs):  # noqa: E501
        """List renditions for a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_link_renditions(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: RenditionPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_shared_link_renditions_with_http_info(shared_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_shared_link_renditions_with_http_info(shared_id, **kwargs)  # noqa: E501
            return data

    def list_shared_link_renditions_with_http_info(self, shared_id, **kwargs):  # noqa: E501
        """List renditions for a shared link  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_link_renditions_with_http_info(shared_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_id: The identifier of a shared link to a file. (required)
        :return: RenditionPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shared_link_renditions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_id' is set
        if ('shared_id' not in params or
                params['shared_id'] is None):
            raise ValueError("Missing the required parameter `shared_id` when calling `list_shared_link_renditions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_id' in params:
            path_params['sharedId'] = params['shared_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links/{sharedId}/renditions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RenditionPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_shared_links(self, **kwargs):  # noqa: E501
        """List shared links  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_links(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip_count: The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list. If not supplied then the default value is 100. 
        :param str where: Optionally filter the list by \"sharedByUser\" userid of person who shared the link (can also use -me-)  *   ```where=(sharedByUser='jbloggs')```  *   ```where=(sharedByUser='-me-')``` 
        :param list[str] include: Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_shared_links_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_shared_links_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_shared_links_with_http_info(self, **kwargs):  # noqa: E501
        """List shared links  # noqa: E501

        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_links_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip_count: The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
        :param int max_items: The maximum number of items to return in the list. If not supplied then the default value is 100. 
        :param str where: Optionally filter the list by \"sharedByUser\" userid of person who shared the link (can also use -me-)  *   ```where=(sharedByUser='jbloggs')```  *   ```where=(sharedByUser='-me-')``` 
        :param list[str] include: Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames 
        :param list[str] fields: A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
        :return: SharedLinkPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip_count', 'max_items', 'where', 'include', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shared_links" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'where' in params:
            query_params.append(('where', params['where']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shared-links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharedLinkPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
