# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from alfresco_api.api_client import ApiClient


class ProbesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_probe(self, probe_id, **kwargs):  # noqa: E501
        """Check readiness and liveness of the repository  # noqa: E501

        **Note:** this endpoint is available in Alfresco 6.0 and newer versions.  Returns a status of 200 to indicate success and 503 for failure.  The readiness probe is normally only used to check repository startup.  The liveness probe should then be used to check the repository is still responding to requests.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe(probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str probe_id: The name of the probe: * -ready- * -live-  (required)
        :return: ProbeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_probe_with_http_info(probe_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_probe_with_http_info(probe_id, **kwargs)  # noqa: E501
            return data

    def get_probe_with_http_info(self, probe_id, **kwargs):  # noqa: E501
        """Check readiness and liveness of the repository  # noqa: E501

        **Note:** this endpoint is available in Alfresco 6.0 and newer versions.  Returns a status of 200 to indicate success and 503 for failure.  The readiness probe is normally only used to check repository startup.  The liveness probe should then be used to check the repository is still responding to requests.  **Note:** No authentication is required to call this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_probe_with_http_info(probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str probe_id: The name of the probe: * -ready- * -live-  (required)
        :return: ProbeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['probe_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_probe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'probe_id' is set
        if ('probe_id' not in params or
                params['probe_id'] is None):
            raise ValueError("Missing the required parameter `probe_id` when calling `get_probe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'probe_id' in params:
            path_params['probeId'] = params['probe_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/probes/{probeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProbeEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
